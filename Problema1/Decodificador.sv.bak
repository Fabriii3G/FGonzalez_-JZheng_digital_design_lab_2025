module Decodificador (
    input wire [3:0] binario,    // Entrada de 4 bits en binario
    output wire [6:0] display1,  // Primer display de 7 segmentos
    output wire [6:0] display2   // Segundo display de 7 segmentos
);

// Conversión binario a Gray
function [3:0] binario_a_gray(input [3:0] bin);
    reg [3:0] gray;
    
    // Realizamos la conversión bit a bit
    gray[3] = bin[3];                        // El bit más significativo se mantiene igual
    gray[2] = bin[3] ^ bin[2];              // XOR entre B3 y B2
    gray[1] = bin[2] ^ bin[1];              // XOR entre B2 y B1
    gray[0] = bin[1] ^ bin[0];              // XOR entre B1 y B0

    binario_a_gray = gray;                  // Retornar el valor Gray
endfunction

// La salida es el número convertido a Gray
wire [3:0] gray = binario_a_gray(binario);

// Función para mostrar el valor decimal en 7 segmentos
function [6:0] decodificar_7segmentos(input [3:0] num);
    case (num)
        4'b0000: decodificar_7segmentos = 7'b1000000; // 0
        4'b0001: decodificar_7segmentos = 7'b1111001; // 1
        4'b0010: decodificar_7segmentos = 7'b0100100; // 2
        4'b0011: decodificar_7segmentos = 7'b0110000; // 3
        4'b0100: decodificar_7segmentos = 7'b0011001; // 4
        4'b0101: decodificar_7segmentos = 7'b0010010; // 5
        4'b0110: decodificar_7segmentos = 7'b0000010; // 6
        4'b0111: decodificar_7segmentos = 7'b1111000; // 7
        4'b1000: decodificar_7segmentos = 7'b0000000; // 8
        4'b1001: decodificar_7segmentos = 7'b0010000; // 9
        default: decodificar_7segmentos = 7'b1111111; // Apagar display si es un valor no esperado
    endcase
endfunction

// Mostrar los dos dígitos en los displays de 7 segmentos
assign display1 = decodificar_7segmentos(binario / 10); // Decenas
assign display2 = decodificar_7segmentos(binario % 10); // Unidades

endmodule
